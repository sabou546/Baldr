/*
 * Prefwin.java
 *
 * Created on 29 mars 2007, 11:13
 *$Id: Prefwin.java 256 2007-11-17 17:22:26Z nezetic $
 */
package ca.qc.bdeb.baldr.ihm;

import ca.qc.bdeb.baldr.noyau.GestionnairePreferences;
import ca.qc.bdeb.baldr.noyau.Noyau;
import ca.qc.bdeb.baldr.noyau.Projet;

import java.awt.*;
import java.io.File;
import java.util.Locale;
import java.util.Observable;
import java.util.Observer;
import javax.swing.DefaultComboBoxModel;
import java.util.ResourceBundle;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author Baldr Team
 */
public class Prefwin extends javax.swing.JFrame implements Observer {

    private static class opts {

        static String editor;
        static boolean expert;
        static String comparator;
        static String locale;
        static boolean preview;
        static boolean concatenation;
        static boolean sommaire;
        static boolean commentaires;
        static boolean whitespaces;
        static boolean progressiveMode;
    }
    private ResourceBundle messages;
    private Noyau noyau = null;
    private GestionnairePreferences preferences;
    private WindowBaldr fenetre;
    private Projet projetCourant;

    /**
     * Le constructeur de la fenêtre des préférences.
     *
     * @param win La fenêtre principale du programme.
     * @param noyau Le noyau, qui peut écrire les préférences.
     */
    public Prefwin(WindowBaldr win, Noyau noyau) {
        this.noyau = noyau;
        this.preferences = noyau.getPrefs();
        messages = win.getMessages();
        fenetre = win;
        projetCourant = noyau.getProjetCourant();
        win.getGestionnaireI18N().addObserver(this);
        initComponents();

        //TODO Work on the 2 functioning modes (disabled for now)
        jPanel1.setVisible(false);

        this.setLocationRelativeTo(this.getParent());
        this.setIconImage(win.iconBaldr);
        this.setResizable(false);

        loadPrefs();
        
        jLabel5.setText(messages.getString("Description_Analyses"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSpinner1 = new javax.swing.JSpinner();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jCheckBoxAnalyseConcatenation1 = new javax.swing.JCheckBox();
        jButtonOk = new javax.swing.JButton();
        jButtonAppliquer = new javax.swing.JButton();
        jButtonAnnuler = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldEditeur = new javax.swing.JTextField();
        jButtonEditeur = new javax.swing.JButton();
        jTextFieldComparateur = new javax.swing.JTextField();
        jButtonComparateur = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jComboBoxLangues = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jCheckBoxPreviewFiles = new javax.swing.JCheckBox();
        jCheckBoxAnalyseConcatenation = new javax.swing.JCheckBox();
        checkBoxCommentaires = new javax.swing.JCheckBox();
        jComboBoxAffichage = new javax.swing.JComboBox<>();
        lblTypeAffichage = new javax.swing.JLabel();
        checkBoxWhitepsaces = new javax.swing.JCheckBox();
        checkBoxSmartSommaire = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        pdfExtractor = new javax.swing.JCheckBox();
        pdfImages = new javax.swing.JCheckBox();

        jCheckBoxAnalyseConcatenation1.setText(messages.getString("Analysis_concatenation")); // NOI18N
        jCheckBoxAnalyseConcatenation1.setActionCommand("");
        jCheckBoxAnalyseConcatenation1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBoxAnalyseConcatenation1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxAnalyseConcatenation1ActionPerformed(evt);
            }
        });

        setTitle(messages.getString("Preference")); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jButtonOk.setText(messages.getString("Ok")); // NOI18N
        jButtonOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOkActionPerformed(evt);
            }
        });

        jButtonAppliquer.setText(messages.getString("Apply")); // NOI18N
        jButtonAppliquer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAppliquerActionPerformed(evt);
            }
        });

        jButtonAnnuler.setText(messages.getString("Cancel")); // NOI18N
        jButtonAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnnulerActionPerformed(evt);
            }
        });

        jLabel2.setText(messages.getString("Fav_Editor_Caption")); // NOI18N

        jButtonEditeur.setText(messages.getString("Browse")); // NOI18N
        jButtonEditeur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditeurActionPerformed(evt);
            }
        });

        jButtonComparateur.setText(messages.getString("Browse")); // NOI18N
        jButtonComparateur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonComparateurActionPerformed(evt);
            }
        });

        jLabel3.setText(messages.getString("Fav_Comparator_Caption")); // NOI18N

        jLabel1.setText(messages.getString("Mode")); // NOI18N

        jRadioButton2.setSelected(true);
        jRadioButton2.setText(messages.getString("Simple_Mode")); // NOI18N
        jRadioButton2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jRadioButton2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButton2ItemStateChanged(evt);
            }
        });

        jRadioButton1.setText(messages.getString("Expert_Mode")); // NOI18N
        jRadioButton1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jRadioButton1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButton1ItemStateChanged(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel1)
                    .add(jRadioButton2)
                    .add(jRadioButton1))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .add(14, 14, 14)
                .add(jRadioButton2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jRadioButton1)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jComboBoxLangues.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "En", "Fr" }));
        jComboBoxLangues.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxLanguesActionPerformed(evt);
            }
        });

        jLabel4.setText(messages.getString("Language")); // NOI18N

        jCheckBoxPreviewFiles.setText(messages.getString("Preview_files")); // NOI18N
        jCheckBoxPreviewFiles.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBoxPreviewFiles.setEnabled(false);

        jCheckBoxAnalyseConcatenation.setText(messages.getString("Analysis_concatenation")); // NOI18N
        jCheckBoxAnalyseConcatenation.setActionCommand("");
        jCheckBoxAnalyseConcatenation.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBoxAnalyseConcatenation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxAnalyseConcatenationActionPerformed(evt);
            }
        });

        checkBoxCommentaires.setText(messages.getString("Analyse_Sans_Commentaires"));
        checkBoxCommentaires.setActionCommand("");
        checkBoxCommentaires.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        checkBoxCommentaires.setName(""); // NOI18N
        checkBoxCommentaires.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxCommentairesActionPerformed(evt);
            }
        });

        jComboBoxAffichage.setModel(new DefaultComboBoxModel(new String[] {messages.getString("Table_View"), messages.getString("List_View")}));
        jComboBoxAffichage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxAffichageActionPerformed(evt);
            }
        });

        lblTypeAffichage.setLabelFor(jComboBoxAffichage);
        lblTypeAffichage.setText(messages.getString("Vue_Par_Defaut"));

        checkBoxWhitepsaces.setText(messages.getString("Analyse_Sans_Whitespaces"));
        checkBoxWhitepsaces.setActionCommand("");
        checkBoxWhitepsaces.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        checkBoxWhitepsaces.setName(""); // NOI18N
        checkBoxWhitepsaces.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxWhitepsacesActionPerformed(evt);
            }
        });

        checkBoxSmartSommaire.setText(messages.getString("Sommaire_Intelligent"));
        checkBoxSmartSommaire.setActionCommand("");
        checkBoxSmartSommaire.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        checkBoxSmartSommaire.setName(""); // NOI18N
        checkBoxSmartSommaire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxSmartSommaireActionPerformed(evt);
            }
        });

        jRadioButton3.setText(messages.getString("Progres_Mod"));
        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setSelected(true);
        jRadioButton3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButton3ItemStateChanged(evt);
            }
        });
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        jRadioButton4.setText(messages.getString("Fix_Color"));
        buttonGroup1.add(jRadioButton4);
        jRadioButton4.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButton4ItemStateChanged(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jTextField1.setMinimumSize(new java.awt.Dimension(55, 19));

        jLabel6.setText("Red");
        jLabel6.setText(messages.getString("Red_Color"));

        jTextField4.setMinimumSize(new java.awt.Dimension(67, 19));

        jLabel10.setText("Yellow");
        jLabel10.setText(messages.getString("Yellow_Color"));

        jTextField6.setText("1.0");
        jTextField6.setEnabled(false);

        jLabel8.setText("Green");
        jLabel8.setText(messages.getString("Green_Color"));

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 68, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jLabel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jTextField6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 68, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jTextField4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 68, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel10)
                            .add(jLabel8))
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel6))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextField4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel10))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextField6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel8)))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(messages.getString("Panel_Title")));

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jRadioButton3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jRadioButton4)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jRadioButton3)
                    .add(jRadioButton4))
                .add(86, 86, 86))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel5.setText("Select one of the following options for analysis :");

        pdfExtractor.setText(messages.getString("extract_pdf"));
        pdfExtractor.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        pdfExtractor.setMaximumSize(new java.awt.Dimension(83, 15));
        pdfExtractor.setMinimumSize(new java.awt.Dimension(83, 15));
        pdfExtractor.setPreferredSize(new java.awt.Dimension(83, 15));

        pdfImages.setText(messages.getString("extract_img"));
        pdfImages.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        pdfImages.setMaximumSize(new java.awt.Dimension(83, 15));
        pdfImages.setMinimumSize(new java.awt.Dimension(83, 15));
        pdfImages.setPreferredSize(new java.awt.Dimension(83, 15));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(214, 214, 214))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(checkBoxSmartSommaire)
                            .add(pdfExtractor, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 298, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(pdfImages, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 298, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(0, 0, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(jButtonAnnuler)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButtonAppliquer)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButtonOk)
                        .addContainerGap())
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(jTextFieldEditeur, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 298, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jButtonEditeur))
                            .add(jLabel2)
                            .add(jLabel3)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel4)
                                    .add(layout.createSequentialGroup()
                                        .add(lblTypeAffichage)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(jComboBoxAffichage, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jComboBoxLangues, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(layout.createSequentialGroup()
                                .add(jTextFieldComparateur, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 298, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jButtonComparateur))
                            .add(jCheckBoxPreviewFiles)
                            .add(jCheckBoxAnalyseConcatenation)
                            .add(jLabel5)
                            .add(layout.createSequentialGroup()
                                .add(35, 35, 35)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(checkBoxCommentaires)
                                    .add(checkBoxWhitepsaces))))
                        .addContainerGap(33, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(25, 25, 25)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(14, 14, 14)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextFieldEditeur, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButtonEditeur))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel3)
                .add(7, 7, 7)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextFieldComparateur, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButtonComparateur))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jComboBoxLangues, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel4))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jComboBoxAffichage, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblTypeAffichage))
                .add(5, 5, 5)
                .add(jCheckBoxPreviewFiles, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jCheckBoxAnalyseConcatenation)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(checkBoxSmartSommaire)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pdfExtractor, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pdfImages, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jLabel5)
                .add(18, 18, 18)
                .add(checkBoxCommentaires)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(checkBoxWhitepsaces)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(1, 1, 1)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButtonOk)
                    .add(jButtonAppliquer)
                    .add(jButtonAnnuler))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jCheckBoxAnalyseConcatenation.getAccessibleContext().setAccessibleName("<Analysis_concatenation>");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonComparateurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonComparateurActionPerformed
        JFileChooser chooser = new JFileChooser();

        jLabel3.setForeground(Color.black);
        int res = chooser.showOpenDialog(this);

        switch (res) {
            case JFileChooser.APPROVE_OPTION:
                jTextFieldComparateur.setText(
                        chooser.getSelectedFile().toString());
                break;
            case JFileChooser.CANCEL_OPTION:
                break;
            case JFileChooser.ERROR_OPTION:
                break;
        }
    }//GEN-LAST:event_jButtonComparateurActionPerformed

    private void jButtonAppliquerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAppliquerActionPerformed
        saveMods();
        fenetre.ajustementSmartSommaire(fenetre);
    }//GEN-LAST:event_jButtonAppliquerActionPerformed

    private void jRadioButton1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButton1ItemStateChanged
        if (evt.getStateChange() == evt.SELECTED) {
            jRadioButton2.setSelected(false);
        }
    }//GEN-LAST:event_jRadioButton1ItemStateChanged

    private void jRadioButton2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButton2ItemStateChanged
        if (evt.getStateChange() == evt.SELECTED) {
            jRadioButton1.setSelected(false);
        }
    }//GEN-LAST:event_jRadioButton2ItemStateChanged

    private void jButtonAnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnnulerActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_jButtonAnnulerActionPerformed

    private void jButtonOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOkActionPerformed
        saveMods();
        fenetre.ajustementSmartSommaire(fenetre);
        if (valider()) {
            this.setVisible(false);
        }
    }//GEN-LAST:event_jButtonOkActionPerformed

    //Vérifie les valeurs entrer par l'utilisateur
    private boolean valider() {
        double red = 0, yellow = 0;

        try {
            if (!opts.progressiveMode) {
                if (!jTextField1.getText().equals("")) {
                    jTextField1.setText(
                            jTextField1.getText().replaceAll(",", "."));
                    red = Double.parseDouble(jTextField1.getText());
                }
                if (!jTextField4.getText().equals("")) {
                    jTextField4.setText(
                            jTextField4.getText().replaceAll(",", "."));
                    yellow = Double.parseDouble(jTextField4.getText());
                }
                if (!(red < 1 && yellow < 1 && (red + yellow) != 0 && red < yellow)) {
                    JOptionPane.showMessageDialog(null, messages.getString("invalid_value"),
                            messages.getString("error"),
                            JOptionPane.ERROR_MESSAGE);
                    return false;
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, messages.getString("number_exp"),
                    messages.getString("error"),
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }


    private void jButtonEditeurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditeurActionPerformed
        JFileChooser chooser = new JFileChooser();

        jLabel2.setForeground(Color.black);
        int res = chooser.showOpenDialog(this);

        switch (res) {
            case JFileChooser.APPROVE_OPTION:
                jTextFieldEditeur.setText(chooser.getSelectedFile().toString());
                break;
            case JFileChooser.CANCEL_OPTION:
                break;
            case JFileChooser.ERROR_OPTION:
                break;
        }
    }//GEN-LAST:event_jButtonEditeurActionPerformed

    private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_jSpinner1StateChanged
    {//GEN-HEADEREND:event_jSpinner1StateChanged

    }//GEN-LAST:event_jSpinner1StateChanged

    private void checkBoxCommentairesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxCommentairesActionPerformed

    }//GEN-LAST:event_checkBoxCommentairesActionPerformed

    private void jComboBoxLanguesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxLanguesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxLanguesActionPerformed

    private void jComboBoxAffichageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxAffichageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxAffichageActionPerformed

    private void checkBoxWhitepsacesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxWhitepsacesActionPerformed

    }//GEN-LAST:event_checkBoxWhitepsacesActionPerformed

    private void jRadioButton3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButton3ItemStateChanged
        // TODO add your handling code here:
        deactiverTextFiel();
    }//GEN-LAST:event_jRadioButton3ItemStateChanged

    private void jRadioButton4ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButton4ItemStateChanged
        // TODO add your handling code here:
        //        jPanel3.setVisible(true);
        activerTextFile();
    }//GEN-LAST:event_jRadioButton4ItemStateChanged

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

            checkBoxWhitepsaces.setEnabled(true);
            checkBoxCommentaires.setEnabled(true);

    }//GEN-LAST:event_formWindowOpened

    private void jCheckBoxAnalyseConcatenation1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxAnalyseConcatenation1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxAnalyseConcatenation1ActionPerformed

    private void checkBoxSmartSommaireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxSmartSommaireActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBoxSmartSommaireActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jCheckBoxAnalyseConcatenationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxAnalyseConcatenationActionPerformed

    }//GEN-LAST:event_jCheckBoxAnalyseConcatenationActionPerformed

    private void deactiverTextFiel() {
//        jPanel3.setVisible(false);
        Component myComps[] = jPanel3.getComponents();
        for (int i = 0; i < myComps.length; i++) {
            if (myComps[i] instanceof JTextField) {
                JTextField myTextField = (JTextField) myComps[i];
                myTextField.enable(false);
                myTextField.setBackground(Color.LIGHT_GRAY);
            }
        }
    }

    private void activerTextFile() {
        Component myComps[] = jPanel3.getComponents();
        for (int i = 0; i < myComps.length; i++) {
            if (myComps[i] instanceof JTextField) {
                JTextField myTextField = (JTextField) myComps[i];
                if (myTextField != jTextField6) {
                    myTextField.enable(true);
                    myTextField.setBackground(Color.white);
                }
            }
        }
    }

    /**
     * Charge les préférences existantes depuis le noyau et modifie l'état des
     * composants selon l'état des préférences.
     */
    private void loadPrefs() {
        if (preferences.prefExists("PREVIEW")) {
            jCheckBoxPreviewFiles.setSelected(
                    (Boolean) preferences.readPref("PREVIEW", false));
        }
        opts.preview = jCheckBoxPreviewFiles.isSelected();

        if (preferences.prefExists("CONCATENATION")) {
            jCheckBoxAnalyseConcatenation.setSelected(
                    (Boolean) preferences.readPref("CONCATENATION", false));
        }
        opts.concatenation = jCheckBoxAnalyseConcatenation.isSelected();

        

        if (preferences.prefExists("COMMENTAIRES")) {
            checkBoxCommentaires.setSelected(
                    (Boolean) preferences.readPref("COMMENTAIRES", false));
        }
        opts.commentaires = checkBoxCommentaires.isSelected();

        if (preferences.prefExists("WHITESPACES")) {
            checkBoxWhitepsaces.setSelected(
                    (Boolean) preferences.readPref("WHITESPACES", false));
        }
        opts.whitespaces = checkBoxWhitepsaces.isSelected();

        if (preferences.prefExists("EDITOR")) {
            jTextFieldEditeur.setText(preferences.readPref("EDITOR"));
        }
        opts.editor = jTextFieldEditeur.getText();

        if (preferences.prefExists("COMPARATOR")) {
            jTextFieldComparateur.setText(preferences.readPref("COMPARATOR"));
        }
        opts.comparator = jTextFieldComparateur.getText();

        if (preferences.prefExists("EXPERT")) {
            if ((Boolean) preferences.readPref("EXPERT", false)) {
                jRadioButton1.doClick();
                opts.expert = true;
            } else {
                opts.expert = false;
            }
        }

        if (preferences.prefExists("VUE_TABLEAU")) {
            boolean vueTableau = (Boolean) preferences.readPref("VUE_TABLEAU", false);
            if (vueTableau) {
                jComboBoxAffichage.setSelectedIndex(0);
            } else {
                jComboBoxAffichage.setSelectedIndex(1);
            }
        }

        String prefDecimal = preferences.readPref("DECIMAL");
        if (prefDecimal.equals("")) {
            prefDecimal = "1";
        }
        this.jSpinner1.setValue(Integer.parseInt(prefDecimal));

        String loc;

        if (preferences.prefExists("LOCALE")) {
            loc = preferences.readPref("LOCALE");
        } else {
            loc = Locale.getDefault().getLanguage();
        }

        int nbr = jComboBoxLangues.getItemCount();

        for (int i = 0; i < nbr; i++) {
            if (jComboBoxLangues.getItemAt(i).toString().toLowerCase()
                    .compareTo(loc) == 0) {
                jComboBoxLangues.setSelectedIndex(i);
            }
        }

        opts.locale = loc;

        if (preferences.prefExists("PROGRESSIVE")) {
            if ((Boolean) preferences.readPref("PROGRESSIVE", false)) {
                opts.progressiveMode = true;
                if ((double) preferences.readPref("RED_VALUE", 0.0) != 0
                        || (double) preferences.readPref("YELLOW_VALUE", 0.0) != 0) {
                    jTextField1.setText(preferences.readPref("RED_VALUE"));
                    jTextField4.setText(preferences.readPref("YELLOW_VALUE"));
                    deactiverTextFiel();
                }
            } else {
                jRadioButton4.setSelected(true);
                opts.progressiveMode = false;
                activerTextFile();
                jTextField1.setText(preferences.readPref("RED_VALUE"));
                jTextField4.setText(preferences.readPref("YELLOW_VALUE"));
            }
        } else {
            opts.progressiveMode = true;
            preferences.writePref("PROGRESSIVE", true);
        }

        if (preferences.prefExists("EXTRACT_PDF")) {
            pdfExtractor.setSelected((Boolean) preferences.readPref("EXTRACT_PDF", false));
        }
        
        if (preferences.prefExists("EXTRACT_IMG")) {
            pdfImages.setSelected((Boolean) preferences.readPref("EXTRACT_IMG", false));
        }
    }

    /**
     * Enregistre les préférences dans le noyau selon l'état de la fenêtre.
     */
    private void saveMods() {
        if (jCheckBoxPreviewFiles.isSelected()) {
            preferences.writePref("PREVIEW", true);
        } else if (opts.preview) {
            preferences.writePref("PREVIEW", false);
        }

        if (jCheckBoxAnalyseConcatenation.isSelected()) {
            preferences.writePref("CONCATENATION", true);
        } else if (opts.concatenation) {
            preferences.writePref("CONCATENATION", false);
        }

//        if (checkBoxSmartSommaire.isSelected()) {
//            preferences.writePref("SOMMAIRE", true);
//        } else if (opts.sommaire) {
//            preferences.writePref("SOMMAIRE", false);
//        }

        if (checkBoxCommentaires.isSelected()) {
            preferences.writePref("COMMENTAIRES", true);
        } else if (opts.commentaires) {
            preferences.writePref("COMMENTAIRES", false);
        }

        if (checkBoxWhitepsaces.isSelected()) {
            preferences.writePref("WHITESPACES", true);
        } else if (opts.whitespaces) {
            preferences.writePref("WHITESPACES", false);
        }

        if (jTextFieldEditeur.getText().compareTo(opts.editor) != 0) {
            if (verifierFichierExecutable(jTextFieldEditeur.getText())) {
                preferences.writePref("EDITOR", jTextFieldEditeur.getText());
            } else {
                jLabel2.setForeground(Color.red);
                return;
            }
        }
        if (jTextFieldComparateur.getText().compareTo(opts.comparator) != 0) {
            if (verifierFichierExecutable(jTextFieldComparateur.getText())) {
                preferences.writePref("COMPARATOR", jTextFieldComparateur.getText());
            } else {
                jLabel3.setForeground(Color.red);
                return;
            }
        }

        /*if (jComboBoxLangues.getSelectedItem().toString().toLowerCase()
         .compareTo(opts.locale) != 0) {*/
        preferences.writePref("LOCALE",
                jComboBoxLangues.getSelectedItem()
                        .toString().toLowerCase());
        //}

        boolean vueTableau = jComboBoxAffichage.getSelectedIndex() == 0;
        preferences.writePref("VUE_TABLEAU", vueTableau);
        PanelResults panneauResultat = trouverPanelResult(fenetre);
        if (panneauResultat != null) {
            if (panneauResultat.getAnalys() != null) {
                panneauResultat.regenererResultats();
            }
        }

        if (jRadioButton1.isSelected() && !opts.expert) {
            preferences.writePref("EXPERT", true);
        } else if (jRadioButton2.isSelected() && opts.expert) {
            preferences.writePref("EXPERT", false);
        }

        if (jRadioButton3.isSelected()) {
            opts.progressiveMode = true;
            preferences.writePref("PROGRESSIVE", true);
        } else {
            opts.progressiveMode = false;
            if (valider()) {
                preferences.writePref("PROGRESSIVE", false);
                preferences.writePref("RED_VALUE",
                        jTextField1.getText());
                preferences.writePref("YELLOW_VALUE",
                        jTextField4.getText());
            }

        }

        if (pdfExtractor.isSelected()) {
            preferences.writePref("EXTRACT_PDF", true);
        } else {
            preferences.writePref("EXTRACT_PDF", false);
        }
        
        preferences.writePref("EXTRACT_IMG", pdfImages.isSelected());
        preferences.writePref("DECIMAL", jSpinner1.getValue().toString());

        preferences.flushPrefs();
        fenetre.getGestionnaireI18N().rechargerLangue();

    }

    private boolean verifierFichierExecutable(String filePath) {
        if (filePath.equals("")) {
            return true;
        }
        File file = new File(filePath);
        if(!file.exists()){
            file = new File(filePath.substring(1));
        }
        return file.exists() && !file.isDirectory();
    }

    @Override
    public void update(Observable o, Object arg) {
        messages = (ResourceBundle) arg;
        jLabel1.setText(messages.getString("Mode"));
        setTitle(messages.getString("Preference"));
        jButtonOk.setText(messages.getString("Ok"));
        jButtonAppliquer.setText(messages.getString("Apply"));
        jButtonAnnuler.setText(messages.getString("Cancel"));
        jLabel2.setText(messages.getString("Fav_Editor_Caption"));
        jButtonEditeur.setText(messages.getString("Browse"));
        jButtonComparateur.setText(messages.getString("Browse"));
        jLabel3.setText(messages.getString("Fav_Comparator_Caption"));
        jLabel1.setText(messages.getString("Mode"));
        jRadioButton2.setText(messages.getString("Simple_Mode"));
        jRadioButton1.setText(messages.getString("Expert_Mode"));
        jLabel4.setText(messages.getString("Language"));
        jCheckBoxPreviewFiles.setText(messages.getString("Preview_files"));
        jCheckBoxAnalyseConcatenation.setText(messages.getString("Analysis_concatenation"));
        checkBoxSmartSommaire.setText(messages.getString("Sommaire_Intelligent"));
        pdfExtractor.setText(messages.getString("extract_pdf"));
        pdfImages.setText(messages.getString("extract_img"));
        
        jLabel5.setText(messages.getString("Description_Analyses"));
        checkBoxCommentaires.setText(messages.getString("Analyse_Sans_Commentaires"));
        checkBoxWhitepsaces.setText(messages.getString("Analyse_Sans_Whitespaces"));
        int affichageSelection = jComboBoxAffichage.getSelectedIndex();
        jComboBoxAffichage.setModel(new DefaultComboBoxModel(new String[]{messages.getString("Table_View"), messages.getString("List_View")}));
        jComboBoxAffichage.setSelectedIndex(affichageSelection);
        lblTypeAffichage.setLabelFor(jComboBoxAffichage);
        lblTypeAffichage.setText(messages.getString("Vue_Par_Defaut"));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(messages.getString("Panel_Title")));
        jRadioButton3.setText(messages.getString("Progres_Mod"));
        jRadioButton4.setText(messages.getString("Fix_Color"));
        jLabel6.setText(messages.getString("Red_Color"));
        jLabel8.setText(messages.getString("Green_Color"));
        jLabel10.setText(messages.getString("Yellow_Color"));
    }

    private PanelResults trouverPanelResult(WindowBaldr win) {
        return trouverPanelResultRecursif(win);
    }

    private PanelResults trouverPanelResultRecursif(Container contenant) {
        if (contenant instanceof PanelResults) {
            return (PanelResults) contenant;
        } else {
            for (Component composante : contenant.getComponents()) {
                if (composante instanceof Container) {
                    PanelResults panneauTrouve = trouverPanelResultRecursif((Container) composante);
                    if (panneauTrouve != null) {
                        return panneauTrouve;
                    }
                }
            }
        }
        return null;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox checkBoxCommentaires;
    private javax.swing.JCheckBox checkBoxSmartSommaire;
    private javax.swing.JCheckBox checkBoxWhitepsaces;
    private javax.swing.JButton jButtonAnnuler;
    private javax.swing.JButton jButtonAppliquer;
    private javax.swing.JButton jButtonComparateur;
    private javax.swing.JButton jButtonEditeur;
    private javax.swing.JButton jButtonOk;
    private javax.swing.JCheckBox jCheckBoxAnalyseConcatenation;
    private javax.swing.JCheckBox jCheckBoxAnalyseConcatenation1;
    private javax.swing.JCheckBox jCheckBoxPreviewFiles;
    private javax.swing.JComboBox<String> jComboBoxAffichage;
    private javax.swing.JComboBox jComboBoxLangues;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextFieldComparateur;
    private javax.swing.JTextField jTextFieldEditeur;
    private javax.swing.JLabel lblTypeAffichage;
    private javax.swing.JCheckBox pdfExtractor;
    private javax.swing.JCheckBox pdfImages;
    // End of variables declaration//GEN-END:variables

}
